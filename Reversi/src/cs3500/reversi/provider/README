README
Invariant: CONSTRAINT = size / 2

What does the code do? What problems is the codebase trying to solve?
Our code is based on the game Reversi. It plays a two-person game of Reversi, allowing players to
make moves on empty tiles, change their opponent's tiles to their own, and win with the highest
amount of colored tiles.

* Give an example of code that can be used, such as an Examplar example (essentially a test)
* that shows the user how to get started with the database

Reversi model = new Reversi(size);
List<List<ICell>> board = model.getBoard();
model.playMove(int q, int r);
boolean gameOver = model.isGameOver();


What are the key components of the code?
* etc. what are components that drives the main functionality of the code
The main components/functionalities of the code are:
1. creating the starting board of the correct size
2. the possible cells a player can make a move on
3. the possible directions that the player can make a move to
4. validating that the move is legal and playing the move

Key Methods
- parseDiags:
Returns all valid neighbors of a cell. This is important in the functionality of Reversi
because a legal play can result in tiles being changed in 1 or more directions.


- generateDiags:
This generates a list of all valid neighbors that are the opposite color of the current player.
Similar to parseDiags, generateDiags also returns a list of neighbors, but just the neighboring
cell, unlike parseDiags which checks for all valid moves along the diagonal from those neighboring
cells.


- isValidDiag:
Returns a true or false boolean if there is a valid diagonal. One of the key components/functions
of the game Reversi is that when a player makes a move, it changes all the tiles within one or more
directions. That direction can be left, right, up, down, and also along the diagonals.
isValidDiags checks if the possible direction the current cell has a neighboring cell can make
a valid move.

- playMove:
playMove is one of the most important methods because it incorporates all of the above methods to
make a play within the game. Once a move has been played and all the valid tiles have switched to
the appropriate color, playMove also changes the current player.

- createBoard:
createBoard makes a 2D array of all the playable tiles within the game of Reversi. It both sets up
the board, with the starting ring, and sets all the coordinates to be used to determine
cell positions while the game is going.

What are key subcomponents of the code?
* overview of nouns within the code, how they are used
1. q and r : the column and row coordinates of cells on the board. With these two subcomponents, it
allowed us to keep track of the cells on the board and also allowed for easier debugging when
seeing where a cell could've been misplaced or a tile accidentally changed to the wrong color.

2. neighbors : we used neighbors as a 2D array of coordinates that would tell all the neighboring
cells of the current cell/the cell that the currentPlayer is trying to make a move on.

3. connections : connections was used as a 2D array of coordinates, similarly to neighbors, that
represents all the valid connections from the empty cell that the currentPlayer is
trying to make a move on. This was a very convenient object because it made flipping the colors
easier since we had all the valid coordinates that could be changed in the move.

4. diags : Diags represented all the cells in a given direction, such as all the cells in the
row, or along the left diagonal, etc. This made checking directions a bit easier because diags
would already have the direction in which the move was moving *fix*.

Supply the reader with a map of the code. This map should:
- Explain where to find each component within the codebase

For all the methods except for playMove, all can be found within the Reversi class. We decided on
private methods for the rest of the methods so that they cannot be used outside of the class.

“Changes for part 2” — explain what functionality was missing, and why, and how you chose to add it.
- playMove(Player, q, r)
- document coordinate system
- initData()

************UPDATES***************

To clarify from the Reversi part 1, we used the axial coordinate system for pointy top hexagons.
We found this coordinate system both the easiest and most flexible to use because it uses q and r
to represent the column and row, which is translated over relatively easy when creating a 2d array
for the hexagon.

Some of the functionality we were missing from part 1 that we included in part 2:
1. We first made two interfaces, an IReversi which has all the mutable parts for Reversi, and
a ReadonlyReversiModel, which handles all observations/non-mutable parts of Reversi.
2. Originally, our board took in one size, n=11, because that was the diameter of the board that
was shown. Now, our board can take in any given size, and it will generate a Reversi board with
the appropriate q, r coordinates.

What we've implemented for part 2:
- To start off, we implemented our view using JFrame and Graphics. The Panel class we have
constructs the whole board of Reversi that is viewable in the ReversiGame class which contains
our main method.

- We made a Hexagon class that generates each Hexagon to be then put on the Panel. Each Hexagon
is made around its center(x,y) coordinates, which is also how the player's piece is also created.

- We also implemented mouse clicks in our view as well. The player can click on any tile on the
board and it'll return the coordinates (q and r) of the tile. Again to reiterate, our q and r are
represent the column and row coordinates of the Reversi board. We use these coordinates to keep
track of where Cells are on the board and also works with the coordinate system that we used.

- We also added three interfaces in our view directory: Features, IView (in place of
what might be referred to as IFrame), and IPanel. At the moment, our current implementations do
not use these interfaces, but we expect that once we start making our controller that we will
use these interfaces more rather than having everything in the Panel and View classes.

Additionally, we added two of the four strategies with mocks for testing:
1. MostPieces: prints a list of cell coordinates from best to worst
that will generate the most pieces for the currentPlayer if played on
2. Corners: prints the corners that the currentPlayer should go for

- Finally, we have not made any changes to our player interfaces or classes in the player directory
at the moment. For now, we have our Player interface, IPlayer, used to represent a Player (playing
either a BLACK or WHITE piece) in the game of Reversi.

**** UPDATES pt.3 ****
We added our controllers with an interface and also a ReversiMouseListener for all of our
MouseListener and KeyListener events. Currently our controller takes in both the view and the model,
and our view and model do not have access to each other.

